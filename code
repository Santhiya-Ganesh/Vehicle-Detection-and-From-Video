#import openCV2 for video  processing
import cv2
import numpy as np

# width is 40
min_contour_width = 40
# height is 40
min_contour_height = 40
offset =10  # 10
line_height =550 # 550
matches = []
#to get the number of left side road vechiles
left_cars = 0
#to get the number of right side road vechiles
right_cars=0

# To find the centroid of a object
def get_centroid(x, y, w, h):
    x1 = int(w / 2)
    y1 = int(h / 2)

    cx = x + x1
    cy = y + y1
    return cx, cy
    # return (cx, cy)


# cap = cv2.VideoCapture(0)
cap = cv2.VideoCapture('final_video.mp4')

# cap = cv2.VideoCapture('Relaxing highway traffic.mp4')
cap.set(3, 1920)
cap.set(4, 1080)
#loop
if cap.isOpened():
    ret, frame1 = cap.read()
else:
    ret = False
ret, frame1 = cap.read()
ret, frame2 = cap.read()
#start looping

while ret:

    #convert frame to grayscale

    d = cv2.absdiff(frame1, frame2)
    grey = cv2.cvtColor(d, cv2.COLOR_BGR2GRAY)
    blur = cv2.GaussianBlur(grey, (5, 5), 0)
    ret, th = cv2.threshold(blur, 20, 255, cv2.THRESH_BINARY)
    dilated = cv2.dilate(th, np.ones((3, 3)))

    kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (2, 2))

    # Fill any small holes

    closing = cv2.morphologyEx(dilated, cv2.MORPH_CLOSE, kernel)

    # cv2.CHAIN_APPROX_SIMPLE removes all redundant points and compresses the contour, thereby saving memory.

    contours, h = cv2.findContours(closing, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

    for (i, c) in enumerate(contours):
        (x, y, w, h) = cv2.boundingRect(c)
        contour_valid = (w >= min_contour_width) and (
                h >= min_contour_height)

        if not contour_valid:

            # crop the image frame into rectangle

            continue
        cv2.rectangle(frame1, (x - 10, y - 10), (x + w + 10, y + h + 10), (255, 0, 0), 2)



        cv2.line(frame1, (0, line_height), (600,line_height ), (0, 255, 0), 2)
        cv2.line(frame1, (700, line_height),(1280,line_height) , (0, 255, 0), 2)
        centroid = get_centroid(x, y, w, h)
        matches.append(centroid)
        cv2.circle(frame1, centroid, 5, (0, 255, 0), -1)
        cx, cy = get_centroid(x, y, w, h)


# count the matching vehicles

        for (x, y) in matches:
            if y < (line_height + offset) and y > (line_height - offset) and (0 <= x <=600) :
                left_cars = left_cars + 1
                matches.remove((x, y))
                print(left_cars)

# count the cars on left side

        cv2.putText(frame1, "Total Cars on Left Lane: " + str(int(left_cars / 2)), (10, 90), cv2.FONT_HERSHEY_SIMPLEX,1,
                    (0, 0, 0), 2)

#count the matching vehicles

        for (x, y) in matches:
            if y < (line_height + offset) and y > (line_height - offset) and (600 <= x <=1280) :
                right_cars = right_cars + 1
                matches.remove((x, y))
                print(right_cars)

#count the vehicle on right side

    cv2.putText(frame1, "Total Cars on Right Lane: " + str(int(right_cars/2)), (800,90), cv2.FONT_HERSHEY_SIMPLEX, 1,
                (0,0,0), 2)

# shape of the frame

    cv2.putText(frame1, 'Shape of the Frame:'+str(frame1.shape), (10, 50), cv2.FONT_HERSHEY_SIMPLEX, 1,
                (0, 0, 0), 1)

    cv2.imshow("Original", frame1)

    # cv2.imshow("Difference", th)
    
    if cv2.waitKey(1) == 27:
        break
    frame1 = frame2
    ret, frame2 = cap.read()

    # fourcc = cv2.VideoWriter_fourcc(*'mp4v')

    # out = cv2.VideoWriter('him.avi', fourcc, 30, (720,1280))

# print(matches)

cv2.destroyAllWindows()
cap.release()
